// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Agent {
  uuid             String  @id
  displayName      String  @map("display_name")
  developerName    String  @map("developer_name")
  description      String
  displayIcon      String  @map("display_icon")
  fullPortrait     String  @map("full_portrait")
  killfeedPortrait String  @map("killfeed_portrait")
  voiceLine        String  @map("voice_line")
  roleUuid         String  @map("role_uuid")
  rewardUuid       String? @unique @map("reward_uuid")

  role AgentRole @relation(fields: [roleUuid], references: [uuid])

  reward ContractReward? @relation(fields: [rewardUuid], references: [uuid])

  colors    AgentColor[]
  abilities AgentAbility[]

  @@map("agent")
}

model AgentColor {
  agentUuid String @map("agent_uuid")
  color     String

  agent Agent @relation(fields: [agentUuid], references: [uuid])

  @@id([agentUuid, color])
  @@map("agent_color")
}

model AgentRole {
  uuid        String @id
  displayName String @map("display_name")
  description String
  displayIcon String @map("display_icon")

  agents Agent[]

  @@map("agent_role")
}

enum AbilitySlot {
  Ability1
  Ability2
  Grenade
  Ultimate
  Passive

  @@map("ability_slot")
}

model AgentAbility {
  agentUuid   String      @map("agent_uuid")
  slot        AbilitySlot
  displayName String      @map("display_name")
  description String
  displayIcon String?     @map("display_icon")

  agent Agent @relation(fields: [agentUuid], references: [uuid])

  @@id([agentUuid, slot])
  @@map("agent_ability")
}

model ContentTier {
  uuid          String @id
  displayName   String @map("display_name")
  developerName String @map("developer_name")
  rank          Int    @unique
  color         String
  displayIcon   String @map("display_icon")

  skins WeaponSkin[]

  @@map("content_tier")
}

model Theme {
  uuid        String @id
  displayName String @map("display_name")

  skins   WeaponSkin[]
  buddies Buddy[]
  cards   Card[]
  sprays  Spray[]

  @@map("theme")
}

enum WeaponCategory {
  Melee
  Sidearm
  Shotgun
  SMG
  Rifle
  Sniper
  Heavy

  @@map("weapon_category")
}

model Weapon {
  uuid           String         @id
  displayName    String         @map("display_name")
  category       WeaponCategory
  displayIcon    String         @map("display_icon")
  killStreamIcon String         @map("kill_stream_icon")

  skins WeaponSkin[]

  @@map("weapon")
}

model WeaponSkin {
  uuid        String  @id
  weaponUuid  String  @map("weapon_uuid")
  tierUuid    String  @map("tier_uuid")
  themeUuid   String  @map("theme_uuid")
  displayName String  @map("display_name")
  displayIcon String? @map("display_icon")
  wallpaper   String?
  rewardUuid  String? @unique @map("reward_uuid")

  weapon Weapon      @relation(fields: [weaponUuid], references: [uuid])
  tier   ContentTier @relation(fields: [tierUuid], references: [uuid])
  theme  Theme       @relation(fields: [themeUuid], references: [uuid])

  reward ContractReward? @relation(fields: [rewardUuid], references: [uuid])

  chromas WeaponSkinChroma[]
  levels  WeaponSkinLevel[]

  @@map("weapon_skin")
}

model WeaponSkinChroma {
  uuid           String  @id
  weaponSkinUuid String  @map("skin_uuid")
  displayName    String  @map("display_name")
  displayIcon    String? @map("display_icon")
  color          String?
  video          String?

  skin WeaponSkin @relation(fields: [weaponSkinUuid], references: [uuid])

  @@map("weapon_skin_chroma")
}

model WeaponSkinLevel {
  uuid           String  @id
  weaponSkinUuid String  @map("skin_uuid")
  displayName    String  @map("display_name")
  displayIcon    String? @map("display_icon")
  type           String?
  video          String?

  skin WeaponSkin @relation(fields: [weaponSkinUuid], references: [uuid])

  @@map("weapon_skin_level")
}

model Episode {
  uuid        String   @id
  displayName String   @map("display_name")
  start       DateTime @db.Date
  end         DateTime @db.Date

  acts EpisodeAct[]

  @@map("episode")
}

model EpisodeAct {
  uuid        String   @id
  episodeUuid String   @map("episode_uuid")
  displayName String   @map("display_name")
  start       DateTime @db.Date
  end         DateTime @db.Date

  episode Episode @relation(fields: [episodeUuid], references: [uuid])

  @@map("episode_act")
}

model Event {
  uuid        String   @id
  displayName String   @map("display_name")
  start       DateTime @db.Date
  end         DateTime @db.Date

  @@map("event")
}

model Currency {
  uuid        String @id
  displayName String @map("display_name")
  displayIcon String @map("display_icon")

  @@map("currency")
}

model Buddy {
  uuid        String  @id
  displayName String  @map("display_name")
  displayIcon String  @map("display_icon")
  themeUuid   String? @map("theme_uuid")
  rewardUuid  String? @unique @map("reward_uuid")

  theme  Theme?          @relation(fields: [themeUuid], references: [uuid])
  reward ContractReward? @relation(fields: [rewardUuid], references: [uuid])

  @@map("buddy")
}

model Card {
  uuid        String  @id
  displayName String  @map("display_name")
  displayIcon String  @map("display_icon")
  wideArt     String  @map("wide_art")
  largeArt    String  @map("large_art")
  themeUuid   String? @map("theme_uuid")
  rewardUuid  String? @unique @map("reward_uuid")

  theme  Theme?          @relation(fields: [themeUuid], references: [uuid])
  reward ContractReward? @relation(fields: [rewardUuid], references: [uuid])

  @@map("card")
}

enum SprayCategory {
  Contextual

  @@map("spray_category")
}

model Spray {
  uuid        String         @id
  displayName String         @map("display_name")
  category    SprayCategory?
  displayIcon String         @map("display_icon")
  art         String?
  animation   String?
  themeUuid   String?        @map("theme_uuid")
  rewardUuid  String?        @unique @map("reward_uuid")

  theme  Theme?          @relation(fields: [themeUuid], references: [uuid])
  reward ContractReward? @relation(fields: [rewardUuid], references: [uuid])

  @@map("spray")
}

model Title {
  uuid        String  @id
  displayName String  @map("display_name")
  text        String
  rewardUuid  String? @unique @map("reward_uuid")

  reward ContractReward? @relation(fields: [rewardUuid], references: [uuid])

  @@map("title")
}

enum ContractType {
  Agent
  Event
  Season

  @@map("contract_type")
}

model Contract {
  uuid        String       @id
  displayName String       @map("display_name")
  displayIcon String?      @map("display_icon")
  type        ContractType

  rewards ContractReward[]

  @@map("contract")
}

enum RewardType {
  Spray
  PlayerCard
  Title
  Character
  EquippableCharmLevel
  EquippableSkinLevel
  Currency

  @@map("reward_type")
}

model ContractReward {
  uuid         String     @id @default(uuid())
  contractUuid String     @map("contract_uuid")
  type         RewardType
  isFree       Boolean    @default(false) @map("is_free")
  xp           Int
  vpCost       Int        @map("vp_cost")

  contract Contract @relation(fields: [contractUuid], references: [uuid])

  title Title?
  spray Spray?
  card  Card?
  buddy Buddy?
  skin  WeaponSkin?
  agent Agent?

  @@map("contract_reward")
}
